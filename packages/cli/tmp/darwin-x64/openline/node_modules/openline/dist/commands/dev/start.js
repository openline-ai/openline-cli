"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@oclif/core");
const shell = tslib_1.__importStar(require("shelljs"));
const dev = tslib_1.__importStar(require("../../lib/dev/startColima"));
const install = tslib_1.__importStar(require("../../lib/dev/installCustomerOs"));
const mac = tslib_1.__importStar(require("../../lib/checks/mac"));
class DevStart extends core_1.Command {
    async run() {
        const { args, flags } = await this.parse(DevStart);
        // Base dependency check
        let depend = mac.dependencies(flags.verbose);
        if (!depend) {
            this.exit(1);
        }
        this.log('ðŸ¦¦ initiating Openline dev server...');
        let start = dev.startColima(flags.verbose);
        if (!start) {
            this.exit(1);
        }
        if (start) {
            this.log('ðŸ¦¦ installing customerOS...');
            let customerOs = install.installCustomerOs(flags.verbose, flags.tag);
            if (customerOs) {
                this.log('');
                this.log('âœ… customerOS started successfully!');
                this.log('ðŸ¦¦ To validate the service is reachable run the command =>  openline dev ping customer-os');
                this.log('ðŸ¦¦ Visit http://localhost:10000 in your browser to play around with the graph API explorer');
                shell.exec('open http://localhost:10000');
            }
        }
    }
}
exports.default = DevStart;
DevStart.description = 'Start an Openline development server';
DevStart.examples = [
    '<%= config.bin %> <%= command.id %>',
];
DevStart.flags = {
    all: core_1.Flags.boolean({ char: 'a' }),
    tag: core_1.Flags.string({
        char: 't',
        description: 'version tag of the image you would like to deploy',
        default: 'latest'
    }),
    verbose: core_1.Flags.boolean({ char: 'v' }),
};
DevStart.args = [
    {
        name: 'app',
        required: false,
        description: 'the Openline application you would like to start',
        default: 'customer-os',
        options: ['customer-os']
    }
];
