"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@oclif/core");
const shell = tslib_1.__importStar(require("shelljs"));
class DevPing extends core_1.Command {
    async run() {
        const { args, flags } = await this.parse(DevPing);
        let cosHealth = shell.exec('curl localhost:10000/health', { silent: true });
        let msHealth = shell.exec('nc -zv -w5 localhost 9009', { silent: true });
        if (cosHealth.code === 0) {
            console.log('✅ customerOS GraphQL API is up and reachable on port 10000');
            console.log('🦦 go to http://localhost:10000 in your browser to play around with the graph API explorer');
        }
        else {
            console.log('❌ customerOS GraphQL API is not reachable');
            console.log('🦦 try running => openline dev start customer-os');
        }
        if (msHealth.code === 0) {
            console.log('✅ message store gRPC API is up and reachable on port 9009');
        }
        else {
            console.log('❌ message store gRPC API is not reachable');
            console.log('🦦 try running => openline dev start customer-os');
        }
    }
}
exports.default = DevPing;
DevPing.description = 'heath check to determine if openline service is up';
DevPing.examples = [
    '<%= config.bin %> <%= command.id %>',
];
DevPing.flags = {
    verbose: core_1.Flags.boolean({ char: 'v' }),
};
DevPing.args = [
    {
        name: 'app',
        required: false,
        description: 'the Openline application you would like to ping',
        default: 'customer-os',
        options: ['customer-os']
    }
];
